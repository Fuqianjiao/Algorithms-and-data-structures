/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        //创建一个队列
        queue<TreeNode *> que;
        //判断是否合法
        if(root!=NULL) que.push(root);
        //创建一个数组
        vector<int> result;
        //单层遍历的逻辑
        while (!que.empty()) {
        //定义队列的长度
        int size = que.size();
        //循环
        for (int i = 0; i < size;i++) {
            //建立头结点
            TreeNode *node = que.front();
            //队列出栈
            que.pop();
            //将每层的最后一个结点放在result数组里面
            if(i==(size-1))result.push_back(node->val);
            //遍历左孩子
            if(node->left)que.push(node->left);
            //遍历右孩子
            if(node->right)que.push(node->right);
        }
        }
        return result;
    }
};
